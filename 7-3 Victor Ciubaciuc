#include <iostream>
#include <string>
#include <fstream>

using namespace std;


string pigLatinString(string pStr);
bool isVowel(char ch);
string rotate(string pStr);
string processWord(string word);


int main() {
    // Write your main here

    string str;

    cout << "Enter a string: ";
    getline(cin, str);
    cout << endl;

    string resultStr = "";
    string word = "";

    cout << "You entered: " << str << endl;

        // Process each character in the string
    for (size_t i = 0; i < str.length(); ++i) {
        char ch = str[i];

        if (isspace(ch) || ispunct(ch)) {
            // If we hit a space or punctuation, process the word and add the punctuation
            if (!word.empty()) {
                resultStr += processWord(word);  
                word = "";  //Resetting
            }
            resultStr += ch;    //adding the punctuation
        } 
        else {
            word += ch;  // Add the character to the word
        }
    }

    
    if (!word.empty()) {
        resultStr += processWord(word);
    }

    cout << "The pig Latin form of " << str << " is: "
         << resultStr << endl;


    ofstream outFile("Ch7_Ex3Out.txt");

    if(outFile.is_open()){
        outFile << "The pig latin form of " << str << " is: " << resultStr << endl;
        outFile.close();    //close the file after writing
        cout << "Output saved to 'Ch7_Ex3Out.txt'" << endl;
    }
    else{
        cout << "Unable to open file." << endl;
    }

    return 0;
}


bool isVowel(char ch){
    switch (ch){
        case 'A':
        case 'E':
        case 'I':
        case 'O':
        case 'U':
        case 'Y':
        case 'a':
        case 'e':
        case 'i':
        case 'o':
        case 'u':
        case 'y':
            return true;
        default:
            return false;
    }
}

string rotate(string pStr){
    return pStr.substr(1) + pStr[0];

    /*
    string::size_type len = pStr.length();
    string rStr;
    rStr = pStr.substr(1, len -1) + pStr[0];

    return rStr;
    */
}

string processingSentence(){
    
}

string processWord(string word) {
    string punctuation = "";

    // If the last character of the word is punctuation
    if (ispunct(word[word.length() - 1])) {
        punctuation = word[word.length() - 1];  
        word = word.substr(0, word.length() - 1);  
    }

    // Translate the word to pig latin
    string pigLatinWord = pigLatinString(word);

    // Append the punctuation back to the word (if any)
    return pigLatinWord + punctuation;
}

//pigLatinString string
string pigLatinString(string pStr){
    string::size_type len;

    bool foundVowel;

    string::size_type counter;

    if(isVowel(pStr[0]))
        pStr = pStr + "-way";
    else{
        pStr = pStr + '-';
        pStr = rotate(pStr);

        len = pStr.length();
        foundVowel = false;

        for (counter = 1; counter < len - 1; counter++){
            if(isVowel(pStr[0])){
                foundVowel = true;
                break;
            }
            else{
                pStr = rotate(pStr);
            }
        }
    
        if (!foundVowel){
            pStr = pStr.substr(1) + "-way";
        }
        else{
            pStr = pStr + "ay";
        }
    }

    return pStr;
}

